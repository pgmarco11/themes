<?php
/***************************************************************************
 *  					Theme Functions
 * 	----------------------------------------------------------------------
 * 						DO NOT EDIT THIS FILE
 *	----------------------------------------------------------------------
 *
 *  					Copyright (C) Themify
 * 						http://themify.me
 *
 *  To add custom PHP functions to the theme, create a child theme (https://themify.me/docs/child-theme) and add it to the child theme functions.php file.
 *  They will be added to the theme automatically.
 *
 ***************************************************************************/

/////// Actions ////////
// Init post, page and additional post types if they exist
add_action( 'after_setup_theme', 'themify_theme_init_types' );
if(themify_load_content_only()){
    // Enqueue scripts and styles required by theme
    add_action( 'wp_enqueue_scripts', 'themify_theme_enqueue_scripts', 11 );
    if(!themify_is_ajax_response()){
        add_action('wp_enqueue_scripts', 'themify_theme_ajax_enqueue_scripts',1);
    }
    // Browser compatibility
    add_action( 'wp_head', 'themify_viewport_tag' );

    // Register custom menu
    add_action( 'init', 'themify_register_custom_nav');

    // Ajax Loading
    add_action( 'init', 'themify_ajax_response');

    /////// Filters ////////
    add_filter( 'themify_parallax_header', 'themify_disable_parallax_header_on_mobile' );

    add_action('admin_enqueue_scripts', 'themify_admin_enqueue_scripts');
}

// Register sidebars
add_action( 'widgets_init', 'themify_theme_register_sidebars' );

/**
 * Enqueue Stylesheets and Scripts
 * @since 1.0.0
 */
function themify_theme_enqueue_scripts() {
	global $themify;

	// Get theme version for Themify theme scripts and styles
	$theme_version = wp_get_theme()->display( 'Version' );

	///////////////////
	//Enqueue styles
	///////////////////

	// Themify Icons
	wp_enqueue_style( 'themify-icons', themify_enque(THEME_URI . '/themify/themify-icons/themify-icons.css'), array(), $theme_version);

	// Themify base styling
	wp_enqueue_style( 'theme-style', themify_enque( THEME_URI . '/style.css' ), array(), $theme_version );

	// Themify Media Queries CSS
	wp_enqueue_style( 'themify-media-queries', themify_enque(THEME_URI . '/media-queries.css'), array(), $theme_version);

	// Themify child base styling
	if( is_child_theme() ) {
		wp_enqueue_style( 'theme-style-child', themify_enque( get_stylesheet_uri() ), array(), $theme_version );
	}

	///////////////////
	//Enqueue scripts
	///////////////////

	// Enqueue media element in pages that will load album in lightbox
	wp_enqueue_style( 'wp-mediaelement' );
	wp_enqueue_script( 'wp-mediaelement' );

	// Masonry
	wp_enqueue_script( 'themify-masonry', THEME_URI . '/js/jquery.masonry.min.js', array(), $theme_version, true );

	// Slide mobile navigation menu
	wp_enqueue_script( 'slide-nav', themify_enque(THEMIFY_URI . '/js/themify.sidemenu.js'), array( 'jquery' ), $theme_version, true );

	// Auto Height iframe plugin
	wp_enqueue_script( 'auto-height-iframe', THEME_URI . '/js/jquery.iframe-auto-height.min.js', array('jquery'), false, true );

	// Themify custom lightbox
	wp_enqueue_script( 'themibox', themify_enque(THEME_URI . '/js/themibox.js'), array('jquery'), $theme_version, true );

	// Dominant Color
	wp_enqueue_script( 'themify-dominant-color', THEME_URI . '/js/jquery.dominant-color.min.js', array(), $theme_version, true );
	// Themify internal scripts
	wp_enqueue_script( 'theme-script',	themify_enque(THEME_URI . '/js/themify.script.js'), array('jquery'), $theme_version, true );


	// Prepare JS variables
	$themify_script_vars = array(
		'lightbox' => themify_lightbox_vars_init(),
		'lightboxContext' => apply_filters('themify_lightbox_context', '#pagewrap'),
		'fixedHeader' 	=> themify_check('setting-fixed_header_disabled')? '': 'fixed-header',
		'ajax_nonce'	=> wp_create_nonce('ajax_nonce'),
		'ajax_url'		=> admin_url( 'admin-ajax.php' ),
		'is_ajax'=>!themify_check('setting-disable_ajax'),
		// Screen size at which horizontal menu is moved into side panel
		'smallScreen' => '760',
		// Resize refresh rate
		'resizeRefresh' => '250',
		// Video File ratio
		'videoRatio' => '1.777777777777778',
		'parallaxHeader' => apply_filters( 'themify_parallax_header', true ),
		// Themify Custom Lightbox
		'themibox' => array(
			'close' => '<i class="close-lightbox ti-close"></i>',
		),

		// Auto play audio
		'autoplay' => themify_check( 'setting-audio_player_autoplay' ) ? 'autoplay' : '',

		// Enable album lightbox
		'albumLightbox' => 'true',
			'fixedHeaderHeightCons' => 74
	);

	if ( $themify_script_vars['is_ajax'] ) {
		$themify_script_vars['disable_link'] = array(
			'feed_url'=> esc_attr(get_bloginfo( 'rss2_url' )),
			'comments_rss'=> esc_attr(get_bloginfo( 'comments_rss2_url' )),
			'login_url'=> wp_login_url(),
			'logout_url'=> wp_logout_url(),
			'admin_url'=> admin_url(),
		);
		$themify_script_vars['site_url'] = get_site_url();
		$ext = wp_get_mime_types();
		unset($ext['htm|html']);
		// Ensure that $ext is an array before passing it to implode
		if (is_array($ext)) {
			$themify_script_vars['ext'] = implode('|', array_keys($ext));
		} else {
			// Handle the case where $ext is not an array, perhaps log an error
			$themify_script_vars['ext'] = ''; // or some default value
		}
	}
	
	// Inject variable values in gallery script
	wp_localize_script( 'theme-script', 'themifyScript', apply_filters('themify_script_vars', $themify_script_vars ) );
	
	// WordPress internal script to move the comment box to the right place when replying to a user
	if ( is_single() || is_page() ) wp_enqueue_script( 'comment-reply' );
}

/**
 * Load Google fonts used by the theme
 *
 * @return array
 */
function themify_theme_google_fonts( $fonts ) {
	/* translators: If there are characters in your language that are not supported by Lato, translate this to 'off'. Do not translate into your own language. */
	if ( 'off' !== _x( 'on', 'Lato font: on or off', 'themify' ) ) {
		$fonts['lato'] = 'Lato:100,300,400,700,900';
	}

	return $fonts;
}
add_filter( 'themify_google_fonts', 'themify_theme_google_fonts' );

function themify_theme_ajax_enqueue_scripts(){
    if(!themify_check('setting-disable_ajax')){
        wp_enqueue_script( 'themify-music-ajax', themify_enque(THEME_URI . '/js/themify.ajax.js'), array('jquery'),  wp_get_theme()->display('Version'), false );
    }
}
function themify_admin_enqueue_scripts(){
    if(isset( $_GET['page'] ) && $_GET['page']=='themify'){
        $theme_version = wp_get_theme()->display('Version');
        // Themify Media Queries CSS
        wp_enqueue_style( 'themify-admin-css', themify_enque(THEME_URI . '/admin/css/admin.css'), array(), $theme_version);
        wp_enqueue_script( 'themify-admin-js', themify_enque(THEME_URI . '/admin/js/admin.js'), array( 'jquery' ), $theme_version, true );
    }
}

/**
 * Disable Parallax header on mobile devices
 * @param bool $bool
 * @return bool
 */
function themify_disable_parallax_header_on_mobile( $bool ) {
	if ( themify_is_touch() ) $bool = false;
	return $bool;
}

/**
 * Add viewport tag for responsive layouts
 * @since 1.0.0
 */
function themify_viewport_tag() {
	echo "\n".'<meta name="viewport" content="width=device-width, initial-scale=1">'."\n";
}

/* Custom Write Panels
/***************************************************************************/

///////////////////////////////////////
// Build Write Panels
///////////////////////////////////////

if ( ! function_exists( 'themify_theme_init_types' ) ) {
	/**
	 * Initialize custom panel with its definitions
	 * Custom panel definitions are located in admin/post-type-TYPE.php
	 * @since 1.0.0
	 */
	function themify_theme_init_types() {
		// Load Themify Social Share
		require_once 'class-social-share.php';

		// Load required files for post, page and custom post types where it applies
		foreach ( array( 'post', 'page', 'event', 'gallery', 'video', 'album', 'press' ) as $type ) {
			require_once( "admin/post-type-$type.php" );
		}
		/**
		 * Navigation menus used in page custom panel to specify a custom menu for the page.
		 * @var array
		 * @since 1.2.7
		 */
		$nav_menus = array(	array( 'name' => '', 'value' => '', 'selected' => true ) );
		foreach ( get_terms( 'nav_menu' ) as $menu ) {
			$nav_menus[] = array( 'name' => $menu->name, 'value' => $menu->slug );
		}

		themify_build_write_panels( apply_filters('themify_theme_meta_boxes',
			array(
				array(
					'name'		=> __('Post Options', 'themify'),
					'id' 		=> 'post-options',
					'options'	=> themify_theme_post_meta_box(),
					'pages'		=> 'post'
				),
				array(
					'name'		=> __('Page Options', 'themify'),
					'id' 		=> 'page-options',
					'options'	=> themify_theme_page_meta_box( array( 'nav_menus' => $nav_menus ) ),
					'pages'		=> 'page'
				),
				array(
					'name'		=> __('Query Posts', 'themify'),
					'id'		=> 'query-posts',
					'options'	=> themify_theme_query_post_meta_box(),
					'pages'		=> 'page'
				),
				array(
					'name'		=> __('Query Events', 'themify'),
					'id' 		=> 'query-event',
					'options'	=> themify_theme_query_event_meta_box(),
					'pages'		=> 'page'
				),
				array(
					'name'		=> __('Query Videos', 'themify'),
					'id' 		=> 'query-video',
					'options'	=> themify_theme_query_video_meta_box(),
					'pages'		=> 'page'
				),
				array(
					'name'		=> __('Query Galleries', 'themify'),
					'id' 		=> 'query-gallery',
					'options'	=> themify_theme_query_gallery_meta_box(),
					'pages'		=> 'page'
				),
				array(
					'name'		=> __('Query Albums', 'themify'),
					'id' 		=> 'query-album',
					'options'	=> themify_theme_query_album_meta_box(),
					'pages'		=> 'page'
				),
				array(
					'name'		=> __('Query Press', 'themify'),
					'id' 		=> 'query-press',
					'options'	=> themify_theme_query_press_meta_box(),
					'pages'		=> 'page'
				),
				array(
					'name'		=> __('Event Options', 'themify'),
					'id' 		=> 'event-options',
					'options'	=> themify_theme_event_meta_box( array( 'nav_menus' => $nav_menus ) ),
					'pages'		=> 'event'
				),
				array(
					'name'		=> __('Video Options', 'themify'),
					'id' 		=> 'video-options',
					'options'	=> themify_theme_video_meta_box( array( 'nav_menus' => $nav_menus ) ),
					'pages'		=> 'video'
				),
				array(
					'name'		=> __('Gallery Options', 'themify'),
					'id' 		=> 'gallery-options',
					'options'	=> themify_theme_gallery_meta_box( array( 'nav_menus' => $nav_menus ) ),
					'pages'		=> 'gallery'
				),
				array(
					'name'		=> __('Album Options', 'themify'),
					'id' 		=> 'album-options',
					'options'	=> themify_theme_album_meta_box( array( 'nav_menus' => $nav_menus ) ),
					'pages'		=> 'album'
				),
				array(
					'name'		=> __( 'Album Tracks', 'themify' ),
					'id' 		=> 'album-tracks',
					'options'	=> themify_theme_tracks_meta_box( array( 'nav_menus' => $nav_menus ) ),
					'pages'		=> 'album'
				),
				array(
					'name'		=> __( 'Press Options', 'themify' ),
					'id' 		=> 'press-options',
					'options'	=> themify_theme_press_meta_box( array( 'nav_menus' => $nav_menus ) ),
					'pages'		=> 'press'
				),
			)
		));
	}
}

/* Custom Functions
/***************************************************************************/

///////////////////////////////////////
// Enable WordPress feature image
///////////////////////////////////////
add_theme_support( 'post-thumbnails' );

if ( ! function_exists( 'themify_register_custom_nav' ) ) {
	/**
	 * Register Custom Menu Function
	 * @since 1.0.0
	 */
	function themify_register_custom_nav() {
		register_nav_menus( array(
			'main-nav' => __( 'Main Navigation', 'themify' ),
			'footer-nav' => __( 'Footer Navigation', 'themify' ),
		));
	}
}

if ( ! function_exists( 'themify_default_main_nav' ) ) {
	/**
	 * Default Main Nav Function
	 * @since 1.0.0
	 */
	function themify_default_main_nav() {
		echo '<ul id="main-nav" class="main-nav clearfix">';
			wp_list_pages('title_li=');
		echo '</ul>';
	}
}

if ( ! function_exists( 'themify_theme_register_sidebars' ) ) {
	/**
	 * Register sidebars
	 * @since 1.0.0
	 */
	function themify_theme_register_sidebars() {
		$sidebars = array(
			array(
				'name' => __('Sidebar', 'themify'),
				'id' => 'sidebar-main',
				'before_widget' => '<div id="%1$s" class="widget %2$s">',
				'after_widget' => '</div>',
				'before_title' => '<h4 class="widgettitle">',
				'after_title' => '</h4>',
			),
			array(
				'name' => __('Social Widget', 'themify'),
				'id' => 'social-widget',
				'before_widget' => '<div id="%1$s" class="widget %2$s">',
				'after_widget' => '</div>',
				'before_title' => '<strong class="widgettitle">',
				'after_title' => '</strong>',
			)
		);
		foreach( $sidebars as $sidebar ) {
			register_sidebar( $sidebar );
		}

		// Footer Sidebars
		themify_register_grouped_widgets();
	}
}

if ( ! function_exists( 'themify_theme_comment' ) ) {
	/**
	 * Custom Theme Comment
	 * @param object $comment Current comment.
	 * @param array $args Parameters for comment reply link.
	 * @param int $depth Maximum comment nesting depth.
	 */
	function themify_theme_comment( $comment, $args, $depth ) {
	   $GLOBALS['comment'] = $comment; ?>

		<li id="comment-<?php comment_ID() ?>">
			<p class="comment-author">
				<?php echo get_avatar( $comment, $size = '50' ); ?>
				<cite <?php comment_class(); ?>><span <?php comment_class(); ?>><?php echo get_comment_author_link(); ?></span></cite>
				<br/>
				<small class="comment-time">
					<?php comment_date( apply_filters('themify_comment_date', '') ); ?>
					 @
					<?php comment_time( apply_filters('themify_comment_time', '') ); ?>
					<?php edit_comment_link( __('Edit', 'themify'),' [',']'); ?>
				</small>
			</p>
			<div class="commententry">
				<?php if ($comment->comment_approved == '0') : ?>
					<p><em><?php _e('Your comment is awaiting moderation.', 'themify') ?></em></p>
				<?php endif; ?>
				<?php comment_text(); ?>
			</div>
			<span class="reply">
				<?php comment_reply_link(array_merge( $args, array('add_below' => 'comment', 'depth' => $depth, 'reply_text' => __( 'Reply', 'themify' ), 'max_depth' => $args['max_depth']))) ?>
			</span>
		<?php
	}
}

if ( ! function_exists( 'themify_theme_has_submenu' ) ) {
	/**
	 * Sets custom class if menu item has a submenu.
	 * @param array $sorted_menu_items The menu items to filter.
	 * @return array The filtered menu items.
	 * @since 1.0.0
	 */
	function themify_theme_has_submenu( $sorted_menu_items ) {
		$last_top = 0;
		foreach ( $sorted_menu_items as $key => $obj ) {
			if ( 0 == $obj->menu_item_parent ) {
				$last_top = $key;
			} else {
				$sorted_menu_items[$last_top]->classes['has-sub-menu'] = 'has-sub-menu';
			}
		}
		return $sorted_menu_items;
	}
	add_filter( 'wp_nav_menu_objects', 'themify_theme_has_submenu', 10 );
}

if ( ! function_exists( 'themify_theme_likeit' ) ) {
	/**
	 * Checks liker's IP and saves it to the post if it's not already in likers list.
	 * @since 1.0.0
	 */
	function themify_theme_likeit() {
		check_ajax_referer( 'ajax_nonce', 'nonce' );

		$post_id = $_POST['post_id'];

		$ip = $_SERVER['REMOTE_ADDR'];

		$current_likers = trim( get_post_meta($post_id, 'likers', true) );

		if( isset( $current_likers ) && '' != $current_likers ) {
			$current_likers_count = count( explode( ',', $current_likers ) );
		} else {
			$current_likers_count = 0;
		}

		if( false === stripos( $current_likers, $ip ) ) {

			$save_likers = isset( $current_likers ) && '' != $current_likers? $current_likers . ',' . $ip :	$ip;

			$update_result = update_post_meta($post_id, 'likers', $save_likers);

			if ( $update_result ) {
				echo json_encode( array(
					'status' => 'new',
					'likers' => $current_likers_count + 1,
					'ip' => $ip
				) );
			} else {
				echo json_encode( array(
					'status' => 'failed',
					'ip' => $ip
				) );
			}
		} else {
			echo json_encode( array(
				'status' => 'isliker',
				'ip' => $ip
			) );
		}
		die();
	}
	add_action('wp_ajax_themify_likeit', 'themify_theme_likeit');
	add_action('wp_ajax_nopriv_themify_likeit', 'themify_theme_likeit');
}

if ( ! function_exists( 'themify_theme_get_like' ) ) {
	/**
	 * Return number of likers or 0
	 * @param bool $echo Whether to echo or just return
	 * @return string
	 * @since 1.0.0
	 */
	function themify_theme_get_like( $echo = false ) {
		if( $current_likers = themify_get('likers') ) {
			$likers = explode(',', trim($current_likers));
			$count = count($likers);
		} else {
			$count = '0';
		}
		if ( $echo ) echo $count;
		return $count;
	}
}

if ( ! function_exists( 'themify_theme_is_liker' ) ) {
	/**
	 * Check if visitor already likes this entry
	 * @param bool $echo Whether to echo or just return
	 * @return string
	 * @since 1.0.0
	 */
	function themify_theme_is_liker( $post_id ) {
		$current_likers = trim( get_post_meta($post_id, 'likers', true) );
		if( false === stripos( $current_likers, $_SERVER['REMOTE_ADDR'] ) ) {
			// IP wasn't found among likers, he doesn't like this yet
			return false;
		} else {
			// IP was found among likers, he likes this already
			return true;
		}
	}
}

if ( ! function_exists( 'themify_theme_content_width' ) ) {
	/**
	 * Checks if the single post or page has default or full width.
	 * @param array $classes
	 * @return array
	 * @since 1.0.0
	 */
	function themify_theme_content_width( $classes = array() ) {
		$classes[] = !is_search() && themify_check( 'content_width' ) ? themify_get( 'content_width' ) : 'default_width';
		$classes[] = themify_check( 'setting-fixed_header_disabled' ) ? '' : 'has-fixed-header';
		if ( ( is_single() || is_page() || themify_is_shop() ) && 'transparent' == themify_get( 'header_wrap' ) ) {
			$classes[] = 'transparent-header';
		}
		return $classes;
	}
	add_filter( 'body_class', 'themify_theme_content_width' );
}

if ( ! function_exists( 'themify_theme_custom_post_css' ) ) {
	/**
	 * Outputs custom post CSS at the end of a post
	 * @since 1.0.0
	 */
	function themify_theme_custom_post_css() {
		global $themify;
		if ( in_array( get_post_type(), array( 'event', 'gallery', 'video', 'album', 'press', 'page' ) ) || themify_is_shop() ) {
			if ( is_page() ) {
				$post_id = '.page-id-' . get_the_ID() . ' #headerwrap';
			} elseif( themify_is_shop() ) {
				$post_id = '.post-type-archive-product #headerwrap';
			} else {
				$post_id = '.postid-' . get_the_ID() . ' #headerwrap';
			}
			$css = array();
			$style = '';
			$rules = array();
			if ( 'transparent' != themify_get( 'header_wrap' ) ) {
				$rules = array(
					$post_id => array(
						array(
							'prop' => 'background-color',
							'key'  => 'background_color'
						),
						array(
							'prop' => 'background-image',
							'key'  => 'background_image'
						),
						array(
							'prop' => 'background-repeat',
							'key'  => 'background_repeat'
						)
					),
				);
			}
			foreach ( $rules as $selector => $property ) {
				foreach ( $property as $val ) {
					$prop = $val['prop'];
					$key = $val['key'];
					if ( is_array( $key ) ) {
						if ( $prop == 'font-size' && themify_check( $key[0] ) ) {
							$css[$selector][$prop] = $prop . ': ' . themify_get( $key[0] ) . themify_get( $key[1] );
						}
					} elseif ( themify_check( $key ) && 'default' != themify_get( $key ) ) {
						if ( $prop == 'color' || stripos( $prop, 'color' ) ) {
							$css[$selector][$prop] = $prop . ': ' . themify_get_color( $key );
						}
						elseif ( $prop == 'background-image' && 'default' != themify_get( $key ) ) {
							$css[$selector][$prop] = $prop .': url(' . themify_get( $key ) . ')';
						}
						elseif ( $prop == 'background-repeat' && 'fullcover' == themify_get( $key ) ) {
							continue;
						}
						elseif ( $prop == 'font-family' ) {
							$font = themify_get( $key );
							$css[$selector][$prop] = $prop .': '. $font;
							if ( ! in_array( $font, themify_get_web_safe_font_list( true ) ) ) {
								$themify->google_fonts .= str_replace( ' ', '+', $font.'|' );
							}
						}
						else {
							$css[$selector][$prop] = $prop .': '. themify_get( $key );
						}
					}
				}
				if ( ! empty( $css[$selector] ) ) {
					$style .= "$selector {\n\t" . implode( ";\n\t", $css[$selector] ) . "\n}\n";
				}
			}

			if ( '' != $style ) {
				echo "\n<!-- Entry Style -->\n<style type=\"text/css\">\n$style</style>\n<!-- End Entry Style -->\n";
			}
		}
	}
	add_action( 'wp_head', 'themify_theme_custom_post_css', 77 );
}

if ( ! function_exists( 'themify_theme_featured_area_style' ) ) {
	function themify_theme_featured_area_style() {
		return themify_check('background_repeat')? themify_get('background_repeat'):'';
	}
}

/**
 * Set the fixed-header selector for the scroll highlight script
 *
 * @since 1.1.3
 */
function themify_theme_scroll_highlight_vars( $vars ) {
	$vars['fixedHeaderSelector'] = '#headerwrap.fixed-header';
	return $vars;
}
add_filter( 'themify_builder_scroll_highlight_vars', 'themify_theme_scroll_highlight_vars' );

/**
 * Allow featured areas to launch fullscreen touch gallery.
 *
 * @since 1.2.7
 *
 * @param array $vars Gallery configuration list.
 *
 * @return array
 */
function themify_theme_configure_gallery( $vars ) {
	$vars['contentImagesAreas'] .= ', .gallery-wrapper';
	return $vars;
}
add_filter( 'themify_gallery_plugins_args', 'themify_theme_configure_gallery' );

/**
 * Configure social share items.
 *
 * @since 1.4.0
 *
 * @param array $settings
 *
 * @return array
 */
function themify_theme_social_share_settings( $settings ) {
	$settings['share_html'] = apply_filters('themify_share_html', sprintf( '
			<div class="box">
				<a href="#" class="share">%s</a>
				<a href="#" class="share-icon"></a>
			</div>
			<div class="social-share clearfix">
				%s
			</div>
			<!-- .social-share -->',
			__( 'Share', 'themify' ),
			$settings['share_html']
		)
	);
	$settings['share_item'] = '.post-share';
	return $settings;
}
add_filter( 'themify_social_share_settings', 'themify_theme_social_share_settings' );

/**
 * Color animation effect for rows and header
 *
 * @since 1.4.2
 */
function themify_theme_do_animated_bg() {
	// Set colors for color animation
	$color_key = 'setting-color_stop_';
	$colors = array();
	for ( $i = 1; $i <= 7; $i++ ) {
		if ( themify_check( $color_key . $i ) ) {
			$colors[] = themify_get_color( $color_key . $i );
		}
	}
	// If there are no colors set in theme settings, use default colors
	if ( empty( $colors ) ) {
		$colors = array(
			'#33baab',
			'#e33b9e',
			'#4961d7',
			'#2ea85c',
			'#2bb8ed',
			'#dd5135',
		);
	}

	$selector = array(
		'.themify_builder_row.animated-bg'
	);
	/* when using transparent header or Background option is set, do not use the animated bg */
	if( ! ( themify_check( 'background_color' ) || ( themify_check( 'header_wrap' ) && 'transparent' == themify_get( 'header_wrap' ) ) ) ) {
		$selector[] = '#headerwrap';
	}

	$options = apply_filters( 'themify_animated_bg_params', array(
		'disabled' => themify_check( 'setting-color_animation_disabled' ),
		'selector' => $selector,
		'speed' => themify_check( 'setting-color_animation_speed' ) ? (int) themify_get( 'setting-color_animation_speed' ) * 1000 : '5000',
		'colors' => $colors
	) );

	if( $options['disabled'] )
		return;

	$css_steps = '';
	foreach( $options['colors'] as $key => $val ) {
		$css_steps .= ( $key == 0 ? '0' : 100 / $key ) . '% { background-color: ' . $val . '; }' . "\n";
	}
	$selector = implode( ',', $options['selector'] );
	$speed = $options['speed'] * count( $colors ); // @note: in CSS the speed for the entire duration of the animation, so so we need to multiply the number of slides

	echo"
	<style type=\"text/css\">
	@-webkit-keyframes themifyAnimatedBG {
		{$css_steps}
	}
	@keyframes themifyAnimatedBG {
		{$css_steps}
	}
	{$selector} {
		-webkit-animation: themifyAnimatedBG {$speed}ms infinite alternate;
		animation: themifyAnimatedBG {$speed}ms infinite alternate;
	}
	</style>
	";
}
add_action( 'wp_head', 'themify_theme_do_animated_bg' );


/**
 * Get event repeat date of post
 *
 * @return string
 */
function themify_theme_get_repeat_date( $type, $number,$date, $time ) {
        $result = '';
        switch($type){
            case 'day':
                $result = sprintf(_n('Every day','Every %s days',$number,'themify'),$number);
            break;
            case 'week':
                $result = sprintf(_n('Every week on %2$s','Every %s weeks on %s',$number,'themify'),$number,  date_i18n('l',  strtotime($date)));
            break;
            case 'year':
                $result = sprintf(_n('Every year on %2$s','Every %s years on %s',$number,'themify'),$number,  date_i18n('M d',  strtotime($date)));
            break;
        }
        if($result && $time){
            $result.=_x( ' @ ', 'Connector between date and time (with spaces around itself) in event date and time.', 'themify' ).date_i18n( get_option( 'time_format' ), strtotime( $time ) ) ;
        }
        return apply_filters('themify_event_date_repeat',$result,$type, $number,$date, $time);
}

/**
 * Deprecated function, kept for backwards compatibility
 */
function themify_theme_menu_nav() {
	themify_menu_nav();
}
function themify_is_ajax_response(){
    static $load = NULL;
    if(is_null($load)){
        $load = isset($_REQUEST['themify_ajax']) && !is_admin() && TFCache::is_ajax();
    }
    return  $load; !empty($_REQUEST['themify_load']);
}
function themify_load_content_only(){
    return  !themify_is_ajax_response() || (themify_is_ajax_response() && !empty($_REQUEST['themify_load']));
}
function themify_ajax_response(){
    if(themify_is_ajax_response()){
        
        add_filter('themify_builder_is_frontend_editor','__return_false');
        add_action( 'themify_footer_data', 'themify_render_ajax_files',100);
       
    }
}

function themify_render_ajax_files(){
    global $wp_scripts,$wp_styles; 
    $response_js = array('queue'=>$wp_scripts->queue,'registered'=>$wp_scripts->registered);
    $response_css = array('queue'=>$wp_styles->queue,'registered'=>$wp_styles->registered);
    echo 
        '<script type="text/javascript">themify_js_files='.  json_encode($response_js).'</script>',
        '<script type="text/javascript">themify_css_files='.  json_encode($response_css).'</script>';
}

function themify_preprocess_comment(){
    if(!empty($_POST['data'])){
        $response = array();
        $comment = wp_handle_comment_submission( wp_unslash( $_POST['data'] ) );
        if ( is_wp_error( $comment ) ) {
            $error = $comment->get_error_message();
            $response['error'] = 1;
            $known_errors = array(
                'require_name_email'=>'author,email',
                'require_valid_email'=>'email',
                'comment_author_column_length'=>'author',
                'comment_author_email_column_length'=>'email',
                'comment_author_url_column_length'=>'url',
                'require_valid_comment'=>'comment',
                'comment_content_column_length'=>'comment'
            );
            $key = $comment->get_error_code();
            $response['data']['val'] = $comment->get_error_message();
            if(isset($known_errors[$key])){
                $response['data']['id']=$known_errors[$key];
            }
        }
        else{
            
            $user = wp_get_current_user();
            do_action( 'set_comment_cookies', $comment, $user );
            $response['success'] = 1;
            $comment_post_ID = $_POST['data']['comment_post_ID'];
            global $post, $product;
            wp_update_comment_count($comment_post_ID);
            $post = get_post( $comment_post_ID );
            query_posts(array('p'=>$post->ID,'post_type'=>$post->post_type));
            if(class_exists('WC_Product')){
                $product = new WC_Product($post);
            }
            ob_start();
            comments_template();
            $response['data'] = ob_get_contents();
            ob_end_clean();
        }
        echo wp_json_encode($response);
    }
    wp_die();
}
add_action('wp_ajax_themify_comment', 'themify_preprocess_comment');
add_action('wp_ajax_nopriv_themify_comment', 'themify_preprocess_comment');